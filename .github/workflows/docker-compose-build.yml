name: Build, Push Docker Compose Application and Create Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 5: Build the Docker image
      - name: Build Docker Image
        run: |
          cd "6 - CÓDIGO BACKEND/repositorio_tcc"
          docker build -t conecta-memory .

      # Step 6: Start Application and Database
      - name: Start Application and Database
        run: |
          cd "6 - CÓDIGO BACKEND/repositorio_tcc"
          docker-compose up -d

      # Step 7: Wait for Database to be Ready
      - name: Wait for Database
        run: |
          echo "Waiting for database to be ready..."
          sleep 30  # Ajuste o tempo conforme necessário

      # Step 8: Run Maven Build inside the Maven Container
      - name: Build Java Project
        run: |
          cd "6 - CÓDIGO BACKEND/repositorio_tcc"
          docker run --rm \
            -v "${{ github.workspace }}/6 - CÓDIGO BACKEND/repositorio_tcc:/app" \
            -w /app \
            maven:3-eclipse-temurin-22-alpine \
            mvn package -DskipTests

      # Step 9: Build and push Docker images using docker-compose
      - name: Build and push Docker images
        run: |
          cd "6 - CÓDIGO BACKEND/repositorio_tcc"
          docker-compose build
          docker-compose push

      # Step 10: Generate a random release version
      - name: Generate Random Release Version
        id: random_version
        run: |
          RANDOM_VERSION=$(shuf -i 1-1000 -n 1)
          echo "Generated random version: v$RANDOM_VERSION"
          echo "RELEASE_VERSION=v$RANDOM_VERSION" >> $GITHUB_ENV

      # Step 11: Create Release only if it doesn't exist
      - name: Create Release
        id: create_release
        run: |
          if git tag | grep -q "${{ env.RELEASE_VERSION }}"; then
            echo "Tag ${{ env.RELEASE_VERSION }} já existe. Nenhuma nova release será criada."
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Criando nova release..."
            response=$(curl -s -X POST \
              -H "Authorization: token ${{ secrets.TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"tag_name\":\"${{ env.RELEASE_VERSION }}\",\"name\":\"Release ${{ env.RELEASE_VERSION }}\",\"draft\":false,\"prerelease\":false}" \
              "https://api.github.com/repos/${{ github.repository }}/releases")

            upload_url=$(echo "$response" | jq -r '.upload_url' | sed -e "s/{?name,label}//")
            echo "Upload URL: $upload_url"
            echo "exists=false" >> $GITHUB_ENV
            echo "upload_url=$upload_url" >> $GITHUB_ENV
          fi

      # Step 12: Upload Release Asset
      - name: Upload Release Asset
        if: env.exists == 'false'
        run: |
          echo "Verificando a existência do arquivo .jar..."
          ls -l "./6 - CÓDIGO BACKEND/repositorio_tcc/target/"
          
          if [ ! -f "./6 - CÓDIGO BACKEND/repositorio_tcc/target/repositorioDeTcc-0.0.1-SNAPSHOT.jar" ]; then
            echo "Arquivo .jar não encontrado. Abortando o upload."
            exit 1
          fi
          
          echo "Uploading asset..."
          response=$(curl -X POST \
            -H "Authorization: token ${{ secrets.TOKEN }}" \
            -H "Content-Type: application/java-archive" \
            --data-binary @"./6 - CÓDIGO BACKEND/repositorio_tcc/target/repositorioDeTcc-0.0.1-SNAPSHOT.jar" \
            "${{ env.upload_url }}?name=repositorioDeTcc-0.0.1-SNAPSHOT.jar")  # Adicione o nome do arquivo aqui
          
          echo "Response: $response"
