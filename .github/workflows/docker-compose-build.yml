name: Build, Push Docker Compose Application and Create Release

on:
  push:
    branches:
      - fixActions
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 5: Build and push Docker images using docker-compose
      - name: Build and push Docker images
        run: |
          cd "6 - CÓDIGO BACKEND/repositorio_tcc"
          docker-compose build
          docker-compose push
          # Tag the image before pushing.  Important for releases.
          IMAGE_NAME="conecta-memory" # Set this to your image name
          VERSION="v$(date +%Y%m%d-%H%M%S)" # Generate a unique version.  Consider using git tags.
          docker tag $IMAGE_NAME:$${GITHUB_SHA::7} $DOCKERHUB_USERNAME/$IMAGE_NAME:$VERSION # Tag with short commit hash
          docker push $DOCKERHUB_USERNAME/$IMAGE_NAME:$VERSION # Push the tagged image

      # Step 6: Generate a random release version
      - name: Generate Random Release Version
        id: random_version
        run: |
          # Generate a more semantic version, consider using git describe --tags
          VERSION="v$(date +%Y%m%d-%H%M%S)"
          echo "Generated version: $VERSION"
          echo "RELEASE_VERSION=$VERSION" >> $GITHUB_ENV
          echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV # Store image tag for release

      # Step 7: Create Release only if it doesn't exist
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1 # Use the official action.  Much simpler.
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          body: |
            Release of version ${{ env.RELEASE_VERSION }}.
            Docker image tag: `$DOCKERHUB_USERNAME/conecta-memory:${{ env.IMAGE_TAG }}` # Include image tag in release notes

      # Step 8: (Optional) Upload Release Asset (JAR file)
      - name: Upload Release Asset
        if: steps.create_release.outputs.upload_url # Only if release was created.
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./6 - CÓDIGO BACKEND/repositorio_tcc/target/repositorioDeTcc-0.0.1-SNAPSHOT.jar # Path to your JAR
          asset_name: repositorioDeTcc-0.0.1-SNAPSHOT.jar
          asset_content_type: application/java-archive
