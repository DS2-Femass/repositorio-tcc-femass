name: Build, Push Docker Compose Application and Create Release

on:
  push:
    branches:
      - fixActions
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx (for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 5: Build and push Docker images
      - name: Build and push Docker images
        run: |
          cd "6 - CÓDIGO BACKEND/repositorio_tcc"
          # Build the image
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/conecta-memory .
          # Tag the image
          VERSION="v$(date +%Y%m%d-%H%M%S)"
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/conecta-memory:latest ${{ secrets.DOCKERHUB_USERNAME }}/conecta-memory:$VERSION
          # Push the image
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/conecta-memory:$VERSION
          echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV # For use in release

      # Step 6: Generate a random release version
      - name: Generate Random Release Version
        id: random_version
        run: |
          echo "Generated random version: ${{ env.VERSION }}"
          echo "RELEASE_VERSION=${{ env.VERSION }}" >> $GITHUB_ENV
      # Step 7: Create Release only if it doesn't exist
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
          body: |
            Release of version ${{ env.RELEASE_VERSION }}.
            Docker image tag: ${{ secrets.DOCKERHUB_USERNAME }}/conecta-memory:${{ env.IMAGE_TAG }}

      # Step 8: Upload Release Asset
      - name: Upload Release Asset
        if: steps.create_release.outputs.upload_url
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./6 - CÓDIGO BACKEND/repositorio_tcc/target/repositorioDeTcc-0.0.1-SNAPSHOT.jar
          asset_name: repositorioDeTcc-0.0.1-SNAPSHOT.jar
          asset_content_type: application/java-archive
