name: Build, Push Docker Compose Application and Create Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      # Step 4: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 5: Build Docker Image
      - name: Build Docker Image
        run: |
          cd "6 - CÓDIGO BACKEND/repositorio_tcc"
          docker build -t conecta-memory .

      # Step 6: Start Application and Database
      - name: Start Application and Database
        run: |
          cd "6 - CÓDIGO BACKEND"
          docker-compose up -d

      # Step 7: Wait for Database to be Ready
      - name: Wait for Database
        run: |
          echo "Waiting for database to be ready..."
          sleep 30

      # Step 8: Run Maven Build inside the Maven Container
      - name: Build Java Project
        run: |
          cd "6 - CÓDIGO BACKEND/repositorio_tcc"
          docker run --rm \
            -v "${{ github.workspace }}/6 - CÓDIGO BACKEND/repositorio_tcc:/app" \
            -w /app \
            maven:3-eclipse-temurin-22-alpine \
            mvn package -DskipTests

      # Step 9: Build and push Docker images using docker-compose
      - name: Build and push Docker images
        run: |
          cd "6 - CÓDIGO BACKEND"
          docker-compose build
          docker-compose push

      # Step 10: Fetch tags and calculate the new version
      - name: Fetch tags and calculate the new version
        id: calculate_version
        run: |
          git fetch --tags
          latest_tag=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "Latest tag: $latest_tag"

          # Extract the version components and increment the patch version
          major=$(echo "$latest_tag" | cut -d. -f1)
          minor=$(echo "$latest_tag" | cut -d. -f2)
          patch=$(echo "$latest_tag" | cut -d. -f3)
          new_patch=$((patch + 1))
          new_version="$major.$minor.$new_patch"

          echo "New version: $new_version"
          echo "RELEASE_VERSION=$new_version" >> $GITHUB_ENV

      # Step 11: Create Release with the new version
      - name: Create Release
        id: create_release
        run: |
          echo "Creating release for version $RELEASE_VERSION"
          gh release create "$RELEASE_VERSION" --title "Release $RELEASE_VERSION" --generate-notes
        env:
          GH_TOKEN: ${{ secrets.TOKEN }}

      # Step 12: Upload release assets (the built JAR file)
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./6 - CÓDIGO BACKEND/repositorio_tcc/target/repositorioDeTcc-0.0.1-SNAPSHOT.jar"  
          asset_name: "repositorioDeTcc.jar"
          asset_content_type: application/java-archive
